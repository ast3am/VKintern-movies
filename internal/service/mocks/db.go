// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ast3am/VKintern-movies/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// db is an autogenerated mock type for the db type
type db struct {
	mock.Mock
}

// CreateActor provides a mock function with given fields: ctx, id, actor
func (_m *db) CreateActor(ctx context.Context, id uuid.UUID, actor models.Actor) error {
	ret := _m.Called(ctx, id, actor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Actor) error); ok {
		r0 = rf(ctx, id, actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMovie provides a mock function with given fields: ctx, id, movie
func (_m *db) CreateMovie(ctx context.Context, id uuid.UUID, movie models.Movie) error {
	ret := _m.Called(ctx, id, movie)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Movie) error); ok {
		r0 = rf(ctx, id, movie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteActor provides a mock function with given fields: ctx, uid
func (_m *db) DeleteActor(ctx context.Context, uid uuid.UUID) error {
	ret := _m.Called(ctx, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMovie provides a mock function with given fields: ctx, uid
func (_m *db) DeleteMovie(ctx context.Context, uid uuid.UUID) error {
	ret := _m.Called(ctx, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActorByUUID provides a mock function with given fields: ctx, id
func (_m *db) GetActorByUUID(ctx context.Context, id uuid.UUID) (*models.Actor, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Actor, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Actor); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActorList provides a mock function with given fields: ctx
func (_m *db) GetActorList(ctx context.Context) (map[string][]string, error) {
	ret := _m.Called(ctx)

	var r0 map[string][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string][]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string][]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovie provides a mock function with given fields: ctx, actor, movie
func (_m *db) GetMovie(ctx context.Context, actor string, movie string) ([]*models.Movie, error) {
	ret := _m.Called(ctx, actor, movie)

	var r0 []*models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*models.Movie, error)); ok {
		return rf(ctx, actor, movie)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*models.Movie); ok {
		r0 = rf(ctx, actor, movie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, actor, movie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovieByUUID provides a mock function with given fields: ctx, id
func (_m *db) GetMovieByUUID(ctx context.Context, id uuid.UUID) (*models.Movie, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Movie, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Movie); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovieList provides a mock function with given fields: ctx, sortby, list
func (_m *db) GetMovieList(ctx context.Context, sortby string, list string) ([]*models.Movie, error) {
	ret := _m.Called(ctx, sortby, list)

	var r0 []*models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*models.Movie, error)); ok {
		return rf(ctx, sortby, list)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*models.Movie); ok {
		r0 = rf(ctx, sortby, list)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, sortby, list)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *db) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateActor provides a mock function with given fields: ctx, id, actor
func (_m *db) UpdateActor(ctx context.Context, id uuid.UUID, actor models.Actor) error {
	ret := _m.Called(ctx, id, actor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Actor) error); ok {
		r0 = rf(ctx, id, actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMovie provides a mock function with given fields: ctx, id, movie
func (_m *db) UpdateMovie(ctx context.Context, id uuid.UUID, movie models.Movie) error {
	ret := _m.Called(ctx, id, movie)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.Movie) error); ok {
		r0 = rf(ctx, id, movie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewDb interface {
	mock.TestingT
	Cleanup(func())
}

// newDb creates a new instance of db. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDb(t mockConstructorTestingTnewDb) *db {
	mock := &db{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
