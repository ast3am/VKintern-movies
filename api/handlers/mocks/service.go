// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/ast3am/VKintern-movies/internal/models"
)

// service is an autogenerated mock type for the service type
type service struct {
	mock.Mock
}

// Auth provides a mock function with given fields: ctx, email, password
func (_m *service) Auth(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckToken provides a mock function with given fields: token, permissionLevel
func (_m *service) CheckToken(token string, permissionLevel string) error {
	ret := _m.Called(token, permissionLevel)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(token, permissionLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateActor provides a mock function with given fields: ctx, actor
func (_m *service) CreateActor(ctx context.Context, actor models.Actor) error {
	ret := _m.Called(ctx, actor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Actor) error); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMovie provides a mock function with given fields: ctx, movie
func (_m *service) CreateMovie(ctx context.Context, movie models.Movie) error {
	ret := _m.Called(ctx, movie)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Movie) error); ok {
		r0 = rf(ctx, movie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteActor provides a mock function with given fields: ctx, id
func (_m *service) DeleteActor(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMovie provides a mock function with given fields: ctx, id
func (_m *service) DeleteMovie(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActorList provides a mock function with given fields: ctx
func (_m *service) GetActorList(ctx context.Context) (map[string][]string, error) {
	ret := _m.Called(ctx)

	var r0 map[string][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string][]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string][]string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovie provides a mock function with given fields: ctx, actor, movie
func (_m *service) GetMovie(ctx context.Context, actor string, movie string) ([]*models.Movie, error) {
	ret := _m.Called(ctx, actor, movie)

	var r0 []*models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*models.Movie, error)); ok {
		return rf(ctx, actor, movie)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*models.Movie); ok {
		r0 = rf(ctx, actor, movie)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, actor, movie)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovieList provides a mock function with given fields: ctx, sortby, line
func (_m *service) GetMovieList(ctx context.Context, sortby string, line string) ([]*models.Movie, error) {
	ret := _m.Called(ctx, sortby, line)

	var r0 []*models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*models.Movie, error)); ok {
		return rf(ctx, sortby, line)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*models.Movie); ok {
		r0 = rf(ctx, sortby, line)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, sortby, line)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateActor provides a mock function with given fields: ctx, id, actor
func (_m *service) UpdateActor(ctx context.Context, id string, actor models.Actor) error {
	ret := _m.Called(ctx, id, actor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Actor) error); ok {
		r0 = rf(ctx, id, actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMovie provides a mock function with given fields: ctx, id, movie
func (_m *service) UpdateMovie(ctx context.Context, id string, movie models.Movie) error {
	ret := _m.Called(ctx, id, movie)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Movie) error); ok {
		r0 = rf(ctx, id, movie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewService interface {
	mock.TestingT
	Cleanup(func())
}

// newService creates a new instance of service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTnewService) *service {
	mock := &service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
